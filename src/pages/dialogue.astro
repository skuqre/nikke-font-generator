---
import '../components/GlobalStyle.astro';
import DialogDisplay from '../components/DialogDisplay.astro';
import DialogueInput from '../components/DialogueInput.astro'
import Credits from '../components/Credits.astro';
import Anise from '../components/Anise.astro';
import SizingTool from '../components/SizingTool.astro';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/png" href="/nikke-font-generator/favicon.png" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Barely Accurate NIKKE Dialogue Generator</title>

		<meta name="description" content="Create dialogue images like NIKKE with the click of some buttons!">
  		<meta name="keywords" content="nikke">
	</head>
	<body>
		<h1>Barely Accurate NIKKE Dialogue Generator</h1>
		<DialogDisplay />
		<SizingTool />
		<p><i>Generated output you see may be barely accurate to inaccurate to official media.<br>Click the image for a fast download!</i></p>
		<DialogueInput />
		<p><i><b>****BE WARY OF POSTING IMAGES FROM THIS ON OFFICIAL CHANNELS!****</b><br>I (skuqre) do not recommend doing so the images may be rulebreaking.<br>I am not liable for anything that happens to you (in the Discord). I entrust you to keep yourself safe.<br>If you'd like to keep yourself safe in the official Discord, use fanart for your images!</i></p>
		<p><i>NIKKE assets can be found on NikkeDB's <a href="https://nikke-db.pages.dev/gallery">gallery</a> and <a href="https://nikke-db.pages.dev/visualiser">Live2D visualizer</a> page for the NIKKEs.<br><b>I plead you keep the watermark on to refrain from spreading misinformation.</b></i></p>
		<Credits />
		<Anise />

		<div align='center' style="opacity: 0.5; margin-top: 128px;">
			<a href='https://www.free-website-hit-counter.com'>
				<img src='https://www.free-website-hit-counter.com/c.php?d=9&id=159038&s=2' border='0' alt='Free Website Hit Counter'>
			</a>
			<br>
			<small>
				<a href='https://www.free-website-hit-counter.com' title="Free Website Hit Counter">
					Free website hit counter
				</a>
			</small>
		</div>

		<script>
			import { hexToCSSFilter } from 'hex-to-css-filter';

			const canvas = document.getElementById("dialogue-canvas");
			const ctx = canvas.getContext("2d");

			const myFont = new FontFace('PEB', "url('/nikke-font-generator/fonts/Pretendard-ExtraBold.ttf')");
			await myFont.load();
			document.fonts.add(myFont);

			const myFont2 = new FontFace('PB', "url('/nikke-font-generator/fonts/Pretendard-Bold.ttf')");
			await myFont2.load();
			document.fonts.add(myFont2);

			let text2 = '';
			let subtext2 = '';
			let size = 100;
			let color = '#f4d259';
			let scalebg = 100;
			let scalech = 100;
			let bgpos = [0, 0]
			let chpos = [0, 0]

			let dragbg = false;
			let dragch = false;

			let wmrk = new Image();
			wmrk.crossOrigin = "anonymous"
			wmrk.src = `/nikke-font-generator/favicon.png`;

			let img = new Image();
			img.crossOrigin = "anonymous"
			img.src = `/nikke-font-generator/images/dialogue/vignette.png`;

			let img2 = new Image();
			img2.crossOrigin = "anonymous"
			img2.src = `/nikke-font-generator/images/dialogue/vignette2.png`;

			let arrow = new Image();
			arrow.crossOrigin = "anonymous"
			arrow.src = `/nikke-font-generator/images/dialogue/arrow.png`;

			let controls = new Image();
			controls.crossOrigin = "anonymous"
			controls.src = `/nikke-font-generator/images/dialogue/controls.png`;

			let choicepng = new Image();
			choicepng.crossOrigin = "anonymous"
			choicepng.src = `/nikke-font-generator/images/dialogue/choice.png`;

			let bg = new Image();
			bg.crossOrigin = "anonymous"
			bg.src = `/nikke-font-generator/images/dialogue/bgs/CommanderRoom.png`;

			let char = new Image();
			char.crossOrigin = "anonymous"
			char.src = `https://media.discordapp.net/attachments/1154460728179314710/1172492683420368917/NIKKE-DB_c012_fb_234.png?ex=656083e7&is=654e0ee7&hm=566d77d4c1bd46ce779c3e6fd6ea8439952eaed66ed0b441281d55c83bc744d1&=&width=1500&height=1500`;

			setTimeout(() => {
				generateText("Anis", "Heya Commander! How's it going?")
			}, 1000);

			document.querySelectorAll('#generate')[0].addEventListener('click', () => {
				var text = document.getElementById('character').value;
				var subtext = document.getElementById('dialog').value;

				generateText(text, subtext);
			});

			document.querySelectorAll('#rlbg')[0].addEventListener('click', () => {
				if (document.getElementById('lbg').value.trim() <= 0) return;
				bg.src = document.getElementById('lbg').value;
				bg.onload = function(e) {
					if (bg.width > bg.height) {
						bgpos = [(1080 - 1080 * (bg.width / bg.height)) / 2, 0];
					} else {
						bgpos = [0, 0];
					}
					generateText(text2, subtext2);
				}
			});

			document.querySelectorAll('#rlc')[0].addEventListener('click', () => {
				if (document.getElementById('lcr').value.trim() <= 0) return;
				char.src = document.getElementById('lcr').value;
				char.onload = function(e) {
					chpos = [(1080 - char.width) / 2, char.height > 1080 ? 0 : 1080 - char.height];
					generateText(text2, subtext2);
				}
			});

			document.querySelectorAll('#clear-char')[0].addEventListener('click', () => {
				char.src = '/nikke-font-generator/images/transparent.png';
				char.onload = function(e) {
					generateText(text2, subtext2);
				}
			});

			document.querySelectorAll('#clear-bg')[0].addEventListener('click', () => {
				bg.src = '/nikke-font-generator/images/transparent.png';
				bg.onload = function(e) {
					generateText(text2, subtext2);
				}
			});

			document.querySelectorAll('#size')[0].addEventListener('change', () => {
				size = parseInt(document.getElementById('size').value);
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#color')[0].addEventListener('change', () => {
				color = document.getElementById('color').value;
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#bg-img-up')[0].addEventListener('change', () => {
				const fileList = document.querySelectorAll('#bg-img-up')[0].files;
				const filer = new FileReader();
				filer.onload = (e) => {
					bg.src = e.target.result;
					bg.onload = (e) => {
						if (bg.width > bg.height) {
							bgpos = [(1080 - 1080 * (bg.width / bg.height)) / 2, 0];
						} else {
							bgpos = [0, 0];
						}
						generateText(text2, subtext2)
					}
				};
				if (fileList.length > 0) {
					filer.readAsDataURL(fileList[0]);
				}
			});

			document.querySelectorAll('#char-img-up')[0].addEventListener('change', () => {
				const fileList = document.querySelectorAll('#char-img-up')[0].files;
				const filer = new FileReader();
				filer.onload = (e) => {
					char.src = e.target.result;
					char.onload = (e) => {
						chpos = [(1080 - char.width) / 2, char.height > 1080 ? 0 : 1080 - char.height];
						generateText(text2, subtext2)
					}
				};
				if (fileList.length > 0) {
					filer.readAsDataURL(fileList[0]);
				}
			});

			document.querySelectorAll('#xposbg')[0].addEventListener('input', () => {
				bgpos[0] = parseInt(document.getElementById('xposbg').value);
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#yposbg')[0].addEventListener('input', () => {
				bgpos[1] = parseInt(document.getElementById('yposbg').value);
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#xposch')[0].addEventListener('input', () => {
				chpos[0] = parseInt(document.getElementById('xposch').value);
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#yposch')[0].addEventListener('input', () => {
				chpos[1] = parseInt(document.getElementById('yposch').value);
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#scalebg')[0].addEventListener('input', () => {
				scalebg = parseInt(document.getElementById('scalebg').value);
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#scalech')[0].addEventListener('input', () => {
				scalech = parseInt(document.getElementById('scalech').value);
				generateText(text2, subtext2)
			});

			bg.onload = (e) => {
				if (bg.width > bg.height) {
				bgpos = [(1080 - 1080 * (bg.width / bg.height)) / 2, 0];
				} else {
					bgpos = [0, 0];
				}
			}

			char.onload = (e) => {
				chpos = [(1080 - char.width) / 2, char.height > 1080 ? 0 : 1080 - char.height];
			}

			let sizetools = false;

			document.getElementById('sizing-tool').style['display'] = "none";
			document.querySelectorAll('#enable-sizing')[0].addEventListener('click', () => {
				sizetools = !sizetools
				document.getElementById('sizing-tool').style['display'] = sizetools ? "block" : "none";
			});

			document.querySelectorAll('canvas#dialogue-canvas')[0].addEventListener('click', () => {
				if (dragbg || dragch) return;
				var link = document.createElement('a');
				var canvas: HTMLCanvasElement = document.getElementById('dialogue-canvas') as HTMLCanvasElement
				link.download = 'nikke-dialogue.png';
				link.href = canvas.toDataURL()
				link.click();
			});

			let mousecapture = [0, 0];
			let previousbg = [0, 0];
			let previousch = [0, 0];
			let dragging = false;

			document.querySelectorAll('canvas#dialogue-canvas')[0].addEventListener('mousedown', (e) => {
				if (dragging) return;
				dragging = true;

				if (dragbg) {
					previousbg[0] = bgpos[0];
					previousbg[1] = bgpos[1];
				}
				if (dragch) {
					previousch[0] = chpos[0];
					previousch[1] = chpos[1];
				}
				mousecapture[0] = e.clientX;
				mousecapture[1] = e.clientY;

				if (dragbg || dragch) {
					disableScroll();
				}
			});

			document.querySelectorAll('canvas#dialogue-canvas')[0].addEventListener('mousemove', (e) => {
				if (!dragging) return;

				if (dragbg) {
					bgpos[0] = e.clientX + (previousbg[0] - mousecapture[0]);
					bgpos[1] = e.clientY + (previousbg[1] - mousecapture[1]);
				}

				if (dragch) {
					chpos[0] = e.clientX + (previousch[0] - mousecapture[0]);
					chpos[1] = e.clientY + (previousch[1] - mousecapture[1]);
				}
				generateText(text2, subtext2);
			});

			document.querySelectorAll('canvas#dialogue-canvas')[0].addEventListener('mouseup', (e) => {
				if (!dragging) return;
				dragging = false;

				enableScroll();
			});

			document.querySelectorAll('canvas#dialogue-canvas')[0].addEventListener('mouseleave', (e) => {
				dragging = false;

				enableScroll();
			});

			document.querySelectorAll('button#dch')[0].addEventListener('click', () => {
				dragch = !dragch;

				if (dragbg) {
					dragbg = false;
				}

				document.querySelectorAll('button#dch')[0].innerHTML = dragch ? "ON" : "OFF";
				document.querySelectorAll('button#dbg')[0].innerHTML = dragbg ? "ON" : "OFF";
			});

			document.querySelectorAll('button#dbg')[0].addEventListener('click', () => {
				dragbg = !dragbg;

				if (dragch) {
					dragch = false;
				}

				document.querySelectorAll('button#dch')[0].innerHTML = dragch ? "ON" : "OFF";
				document.querySelectorAll('button#dbg')[0].innerHTML = dragbg ? "ON" : "OFF";
			});

			let drawfil = true;
			document.querySelectorAll('button#df')[0].addEventListener('click', () => {
				drawfil = !drawfil;

				document.querySelectorAll('button#df')[0].innerHTML = drawfil ? "ON" : "OFF";
				generateText(text2, subtext2)
			});

			let arrowOn = true;
			document.querySelectorAll('#arrow-toggle')[0].addEventListener('click', () => {
				arrowOn = !arrowOn;

				document.querySelectorAll('#arrow-toggle')[0].innerHTML = "Bottom right arrow: " + (arrowOn ? "ON" : "OFF");
				generateText(text2, subtext2)
			});

			let controlsOn = true;
			document.querySelectorAll('#controls-toggle')[0].addEventListener('click', () => {
				controlsOn = !controlsOn;

				document.querySelectorAll('#controls-toggle')[0].innerHTML = "Top right controls: " + (controlsOn ? "ON" : "OFF");
				generateText(text2, subtext2)
			});

			document.querySelectorAll('#customfil')[0].addEventListener('input', () => {
				generateText(text2, subtext2)
			});


			let gsnum = 0;
			document.querySelectorAll('#gsnum')[0].addEventListener('input', () => {
				gsnum = parseInt(document.getElementById('gsnum').value);
				generateText(text2, subtext2)
			});

			let blnum = 0;
			document.querySelectorAll('#blnum')[0].addEventListener('input', () => {
				blnum = parseInt(document.getElementById('blnum').value);
				generateText(text2, subtext2)
			});

			let brnum = 100;
			document.querySelectorAll('#brnum')[0].addEventListener('input', () => {
				brnum = parseInt(document.getElementById('brnum').value);
				generateText(text2, subtext2)
			});

			let cs = ''
			document.querySelectorAll('#choices')[0].addEventListener('input', () => {
				cs = parseInt(document.getElementById('choices').value);
				generateText(text2, subtext2)
			});

			function disableScroll() {
				let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
				let scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

				window.onscroll = function() {
					window.scrollTo(scrollLeft, scrollTop, "instant");
				};

				window.onwheel = (e) => {
					if (dragbg) {
						scalebg += (e.deltaY / -100);
					}
					if (dragch) {
						scalech += (e.deltaY / -100);
					}

					document.getElementById('scalebg').value = scalebg;
					document.getElementById('scalech').value = scalech;
					generateText(text2, subtext2)
				}
			}

			function enableScroll() {
				window.onscroll = function() {};
				window.onwheel = (e) => {}
			}

			function generateText(text: String, subtext: String) {
				ctx.globalAlpha = 1;
				text2 = text;
				subtext2 = subtext;
				color = document.getElementById('color').value;

				ctx.clearRect(0, 0, 1080, 1080);
				canvas.width = 1080 * size/100;
				canvas.height = 1080 * size/100;
				ctx.scale(size/100, size/100);

				let bgs = scalebg/100;
				let chs = scalech/100;

				if (drawfil) {
					let custom = document.getElementById('customfil').value + '';
					ctx.filter = `grayscale(${gsnum}%) blur(${blnum}px) brightness(${brnum}%) ` + custom;	
				}

				if (bg.width > bg.height) {
					ctx.drawImage(bg, bgpos[0], bgpos[1], 1080 * (bg.width / bg.height) * bgs, 1080 * bgs);
				} else {
					ctx.drawImage(bg, bgpos[0], bgpos[1], 1080 * bgs, 1080 * (bg.height / bg.width) * bgs);
				}

				document.getElementById('xposbg').value = bgpos[0];
				document.getElementById('yposbg').value = bgpos[1];

				document.getElementById('xposch').value = chpos[0];
				document.getElementById('yposch').value = chpos[1];

				ctx.drawImage(char, chpos[0], chpos[1], char.width * chs, char.height * chs)

				ctx.filter = "none";

				if (document.getElementById('choices').value.trim().length > 0) {
					let shit = document.getElementById('choices').value;
					shit = shit.replaceAll('\\n', String.fromCharCode(13, 10));

					let split = shit.trim().split('\n');
					console.log(split.length)
					if (split.length > 1) {
						ctx.fillStyle = "rgba(0, 0, 0, 0.6)";
						ctx.fillRect(0, 0, 1080, 1080);
					}

					ctx.drawImage(img2, 0, 0);

					let startY = 765 - ((choicepng.height * split.length) + (14 * (split.length - 1))) / 2;

					let curY = startY;
					for (let i = 0; i < split.length; i++) {
						let item = split[i];

						ctx.drawImage(choicepng, (1080-choicepng.width) / 2, curY);

						ctx.font = "21px PEB";
						ctx.fillStyle = "#ffffff";
						ctx.textBaseline = "middle";
						ctx.textAlign = "center";
						ctx.fillText(item.trim(), 1080/ 2, curY + choicepng.height / 2);
						
						curY += choicepng.height + 14;
					}


				} else {
					ctx.drawImage(img, 0, 0)

					ctx.fillStyle = color;
					ctx.fillRect(110, 883, 5, 24);

					ctx.font = "25px PEB";
					ctx.fillStyle = "#ffffff";
					ctx.textBaseline = "top";
					ctx.fillText(text, 125, 877 + 8, 830);

					ctx.font = "23px PB";
					ctx.fillStyle = "#dcdcdc";
					ctx.textBaseline = "top";

					let lines = getLines(ctx, subtext, 830)

					for (let i = 0; i<lines.length; i++) {
						ctx.fillText(lines[i], 125, 929 + 7 + (39 * i), 830);
					}
				}

				if (arrowOn && document.getElementById('choices').value.trim().length == 0) {
					ctx.drawImage(arrow, 0, 0);
				}

				if (controlsOn) {
					ctx.drawImage(controls, 0, 0);
				}

				ctx.globalAlpha = 0.065;
				ctx.drawImage(wmrk, 16, -16, 128, 128);
			}

			// https://stackoverflow.com/questions/2936112/text-wrap-in-a-canvas-element
			// im fucking stupid -skuqre
			function getLines(ctx, text, maxWidth) {
				var separator = text.includes(" ") ? " " : "";

				var words = text.split(separator);
				var lines = [];
				var currentLine = words[0];
				
				for (var i = 1; i < words.length; i++) {
					var word = words[i];
					var width = ctx.measureText(currentLine + separator + word).width;
					if (width < maxWidth) {
						currentLine += separator + word;
					} else {
						lines.push(currentLine);
						currentLine = word;
					}
				}
				lines.push(currentLine);
				return lines;
			}
		</script>
	</body>
</html>
